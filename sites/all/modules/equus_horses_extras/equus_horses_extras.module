<?php

define("EQUUS_HORSES_EXTRAS_REGULAR_HC_TID",1);
define("EQUUS_HORSES_EXTRAS_RARE_HC_TID",2);
define("EQUUS_HORSES_EXTRAS_POTENTIAL_STAT_MAX", 1000);
define("EQUUS_HORSES_EXTRAS_POTENTIAL_STAT_MIN", 500);
define("EQUUS_HORSES_EXTRAS_CUR_POT_STAT_RATIO", 0.50);

/**
 * Displays an error message if the user has not created 
 * an organization and/or a property when attempting to create a horse.
 *
 * Displays the number of each type of horse credits the user has. 
 *
 * Displays only those properties associated with an organization
 * that the currently logged in user is a member of in the horse 
 * residence field.
 *
 * Implements hook_form_alter for the horse creation form.
 */
function equus_horses_extras_form_horse_node_form_alter(&$form, $form_state) {
	$uid = $GLOBALS['user']->uid;
	// get all organizations (and properties) associated with the currently logged in user
	$organizations = equus_properties_get_user_assoc_properties_by_org($uid);

	// if the user has no organizations, print an error
	if (empty($organizations)) {
		drupal_set_message('You need to create an organization and a property before you can create a horse.','error');
	} else {
		$empty = TRUE;

		// if the user has no properties, print an error
		foreach ($organizations as $property_list) {
			if (!empty($property_list)) {
				$empty = FALSE;
				break;
			}
		}

		if ($empty) {
			drupal_set_message('You need to create a property before you can create a horse.','error');
		}
	}
	
	// pass the correct property options to the form for the horse residence field
	$form['field_horse_residence']['und']['#options'] = $organizations;

	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);

	$message = "";
	if ($current_regular_HC == 0) {
		$message .= "You have 0 Regular Horse Credits ";
	} else if ($current_regular_HC == 1) {
		$message .= "You have 1 Regular Horse Credit ";
	} else if ($current_regular_HC > 1) {
		$message .= "You have $current_regular_HC Regular Horse Credits ";
	}
	if ($current_rare_HC == 0) {
		$message .= "and 0 Rare Horse Credits.";
	} else if ($current_rare_HC == 1) {
		$message .= "and 1 Rare Horse Credit.";
	} else if ($current_rare_HC > 1) {
		$message .= "and $current_rare_HC Rare Horse Credits.";
	}
	drupal_set_message($message);

	// If the horse is being edited, disable the creating org field. Creating org should only be accessable on first creation.
	if ($form['nid']['#value'] != NULL) {
		$form['field_horse_creating_org']['#access'] = false;
	}

	$breed_IDs = array_slice(array_keys($form['field_horse_breed']['und']['#options']),1);

	$breeds = node_load_multiple($breed_IDs);

	foreach ($breeds as $breed) {
		$form['field_horse_breed']['und']['#options'][$breed->nid] = $breed->field_base_breed['und'][0]['value'] . " - " . $breed->title;
	}

	asort($form['field_horse_breed']['und']['#options']);

    // TODO: Add form element for foal aging speed, age transition year, adult aging speed
    $speed_options = array(
        1 => '1x (real time)',
        3 => '3x (standard ES time)',
        6 => '6x (double standard ES time)',
        12 => '12x (standard for foals - not recommended for adults)'
    );
    $form['foal_speed'] = array(
        '#type' => 'select',
        '#title' => 'Foal Aging Speed',
        '#options' => $speed_options,
        '#description' => 'insert help text here',
        // TODO: Write help text for aging systems
        '#default_value' => 12,
        '#required' => true,
    );
    $form['adult_speed'] = array(
        '#type' => 'select',
        '#title' => 'Adult Aging Speed',
        '#options' => $speed_options,
        '#description' => 'insert help text here',
        // TODO: Write help text for aging systems
        '#default_value' => 3,
        '#required' => true,
    );
    //TODO: Validation!!!
    $form['transition_year'] = array(
        '#type' => 'textfield',
        '#title' => 'Transition Year',
        '#description' => 'The year the horse transitions from foal to adult.',
        '#default_value' => '4',
        '#required' => true,
        '#size' => 3
    );
}

/**
 * Gets the user's active associated horses
 *
 * @param $uid The ID of the user in question.
 * @return An array of active horse IDs
 */
function equus_horses_extras_get_assoc_active_horses($uid) {
	// get user's associated properties
	$nids = equus_properties_get_user_assoc_properties($uid);
	if (empty($nids)) {
		// if nids is empty return an empty array
		return array();
	}
	//query for all horses associated with a property
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'horse')
		->propertyCondition('status', 1)
		->fieldCondition('field_horse_activation_status', 'value', 'Active', '=')
		->fieldCondition('field_horse_residence', 'target_id', $nids, 'IN');
	$result = $query->execute();

	$horses = array();

	if (count($result) > 0) {
		$horses = array_keys($result['node']);
	}
	return $horses;
}

/**
 * Gets the user's associated horses (active and inactive)
 *
 * @param $uid The ID of the user in question.
 * @return An array of horse IDs. Will return empty array if there are no assoc horses.
 */
function equus_horses_extras_get_assoc_horses($uid) {
		// get user's associated properties
	$nids = equus_properties_get_user_assoc_properties($uid);
	if (empty($nids)) {
		// if nids is empty return an empty array
		return array();
	}
	//query for all horses associated with a property
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'horse')
		->propertyCondition('status', 1)
		->fieldCondition('field_horse_residence', 'target_id', $nids, 'IN');
	$result = $query->execute();

	$horses = array();

	if (count($result) > 0) {
		$horses = array_keys($result['node']);
	}
	return $horses;
}

/**
 * Gets the horses that are in residence at a property.
 *
 * @param $nid The id of the property.
 * @return array An array of horse IDs in residence at the property.
 * 				 Will return empty array if there are no assoc horses.
 */
function equus_horses_extras_get_prop_assoc_horses($nid) {
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'horse')
		->propertyCondition('status', 1)
		->fieldCondition('field_horse_residence', 'target_id', $nid, '=');
	$result = $query->execute();

	$horses = array();

	if (count($result) > 0) {
		$horses = array_keys($result['node']);
	}
	return $horses;
}

/**
 *	Gets the org which owns the property the horse resides at
 * 
 * @param $horse Horse node.
 * @return Organization node or null.
 */
function equus_horses_extras_get_residence_org($horse) {
	$residence_id = $horse->field_horse_residence[LANGUAGE_NONE][0]['target_id'];

	$residence = node_load($residence_id);
	if (!$residence) {
		return NULL;
	}

	$org_ID = $residence->field_property_ownership[LANGUAGE_NONE][0]['target_id'];

	$org = node_load($org_ID);
	if (!$org_ID) {
		return NULL;
	}
	return $org;
}

/**
 * Gets a list of horse options by name.
 * @param $nids IDs of the horses 
 */
function equus_horses_extras_get_horse_options($nids) {
	if (empty($nids)) {
		return;
	}

	$horses = node_load_multiple($nids);

	// populate the array that we are going to use to set the options
	$horse_options = array();
	foreach ($horses as $horse) {
		$horse_options[$horse->nid] = $horse->field_horse_real_name['und'][0]['value'];
	}
	return $horse_options;
}

/**
 * Verifies that the user has at least 1 HC in order to activate a horse.
 * @param $uid ID of the currently logged in user.
 */
function equus_horses_extras_validate_regular_hc_count($uid) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);
	if ($current_regular_HC < 1 ) {
		form_set_error('field_horse_activation_status', 'You do not have enough Horse Credits to make this horse active. Please visit the Store to buy a Horse Credit.');
	}
}

/**
 * Verifies that the user has at least 1 Rare Horse Credit in order to activate a rare colored horse.
 * @param $uid ID of the currently logged in user.
 */
function equus_horses_extras_validate_rare_hc_count($uid) {
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);
	if ($current_rare_HC < 1 ) {
		form_set_error('field_horse_activation_status', 'You do not have enough Rare Horse Credits to make this horse active. Please visit the Store to buy a Rare Horse Credit.');
	}
}

/**
 * Verifies that the currently logged in user is a member of the 
 * organization that the property in question belongs to.
 * @param $uid ID of the currently logged in user
 * @param $nid ID of the property in question
 */
function equus_horses_extras_validate_residence_ownshp($uid, $nid) {
	$organizations = equus_properties_get_user_assoc_properties_by_org($uid);

	$found = FALSE;
	foreach ($organizations as $properties) {
		foreach ($properties as $propertyid => $property) {
			if ($propertyid == $nid) {
				$found = TRUE;
				break;
			}
		}
		if ($found) {
			break;
		}
	}
	if (!$found) {
		form_set_error('field_horse_residence', "You must be a member of the organization that owns the residence property to assign a horse to it.");
	}
}

/**
 * Performs validation on horse creation form elements.
 * 
 * Implements hook_node_validate
 */
function equus_horses_extras_node_validate($node, $form, &$form_state) {
	if ($node->type != 'horse') {
		return;
	}

	$breedID = $node->field_horse_breed['und'][0]['target_id'];
	$breed = node_load($breedID);

	$body_typeID = $node->field_horse_body_type['und'][0]['target_id'];
	$body_type = node_load($body_typeID);


	// Verify that user has enough horse credits to activate the horse
	// TODO: Make this section its own function
	// check if new horse
	if (!isset($node->nid)) {
		// if new check whether active is set
		if ($node->field_horse_activation_status['und'][0]['value'] == 'Active') {
			// if yes check for points
			equus_horses_extras_validate_regular_hc_count($form['uid']['#value']);
		} 
	} else {
		// get activation status
		$original_value = $form['#node']->field_horse_activation_status['und'][0]['value'];
		$new_value = $node->field_horse_activation_status['und'][0]['value'];

		// if not new check whether previous value is pending and new value is active
		if ($original_value == 'Pending' && $new_value == 'Active') {
			// if yes check for points
			equus_horses_extras_validate_regular_hc_count($form['uid']['#value']);
		}
	}

	// Verify that residence/property is owned by the currently logged in user
	equus_horses_extras_validate_residence_ownshp($form['uid']['#value'], $node->field_horse_residence['und'][0]['target_id']);

	// Verify that existing horse hasn't had its creating org changed
/*	if ($node->nid != NULL) {
		$original_creating_org = $form['#node']->field_horse_creating_org['und'][0]['target_id'];
		$new_creating_org = $node->field_horse_creating_org['und'][0]['target_id'];
		// If the horse is being edited, disable the creating org field. Creating org should only be accessable on first creation.
		if ($original_creating_org != $new_creating_org) {
			form_set_error('field_horse_creating_org', "Database consistency error. Please contact the site administrator.");
			watchdog('field_horse_creating_org', 'Attempted to change creating org after horse was already created. uid = @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
		}
	}*/
	// TODO: Test whether the field permissions module handles this for me already: 
	// Are there any fields that are critical to gameplay and would be game breaking if people were able to freely edit?
	// Stats
	// Gender
	// Age
	// Pedigree
	// Show Cooldown
	// TODO: Ask Peter about doing this in a loop

    $transition_year = $form['transition_year']['#value'];
    if (!is_numeric($transition_year) || $transition_year < 0 || $transition_year != floor($transition_year)) {
        form_set_error('transition_year', "$transition_year is not a valid year.");
    }
}

function equus_horses_extras_node_submit($node, $form, &$form_state) {
    if ($node->type != 'horse') {
        return;
    }

    if ($node->nid == NULL) {
        $dob = $node->field_horse_date_of_birth[LANGUAGE_NONE][0]['value'];
        $dob_date = new DateTime($dob);

        if ($form['foal_speed']['#value'] == $form['adult_speed']['#value']) {
            $foal_end_date_str = NULL;
        } else {
            $foal_days = round(($form['transition_year']['#value']*365)/$form['foal_speed']['#value']);
            $foal_end_date = $dob_date->add(new DateInterval("P{$foal_days}D"));
            $foal_end_date_str = $foal_end_date->format('Y-m-d H:i:s');
        }

        $aging_details = array();
        $aging_details[] = array('start' => $dob, 'end' => $foal_end_date_str, 'speed' => $form['foal_speed']['#value']);

        // Add adult period if there is one
        if ($foal_end_date_str != NULL) {
            $adult_start_date = $foal_end_date->add(new DateInterval("P1D"));
            $adult_start_date_str = $adult_start_date->format('Y-m-d H:i:s');
            $aging_details[] = array('start' => $adult_start_date_str, 'end' => NULL, 'speed' => $form['adult_speed']['#value']);
        }
        $node->field_horse_aging_details[LANGUAGE_NONE][0]['value'] = json_encode($aging_details);
    }
}

function equus_horses_extras_node_presave($node) {
	if ($node->type != 'horse') {
		return;
	}
	if ($node->nid == NULL || $node->original->title != $node->title) {
		$orgID = $node->field_horse_creating_org['und'][0]['target_id'];
		$org = node_load($orgID);
		$real_name = equus_organizations_calc_real_name($node->title, $org);
		$node->field_horse_real_name['und'][0]['value'] = $real_name;
	}
}

/**
 * Detracts a regular HC from a user's account
 * @param $uid ID of the user to detract a regular HC from.
 */
function equus_horses_extras_spend_regular_hc($uid) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);
	if ($current_regular_HC < 1 ) {
		return false;
	}
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => -1,
		'tid' => EQUUS_HORSES_EXTRAS_REGULAR_HC_TID
	));
	return true;
}

/**
 * Detracts a rare HC from a user's account
 * @param $uid ID of the user to detract a rare HC from.
 */
function equus_horses_extras_spend_rare_hc($uid) {
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);
	if ($current_rare_HC < 1 ) {
		return false;
	}
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => -1,
		'tid' => EQUUS_HORSES_EXTRAS_RARE_HC_TID
	));
	return true;
}

/**
 * Adds some number of regular HCs to a user's account
 * @param $uid ID of the user to give regular HC to.
 * @param $quantity Number of regular HC to give a user.
 */
function equus_horses_extras_gain_regular_hc($uid, $quantity) {
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => $quantity,
		'tid' => EQUUS_HORSES_EXTRAS_REGULAR_HC_TID
	));
}

/**
 * Adds some number of rare HCs to a user's account
 * @param $uid ID of the user to give rare HC to.
 * @param $quantity Number of rare HC to give a user.
 */
function equus_horses_extras_gain_rare_hc($uid, $quantity) {
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => $quantity,
		'tid' => EQUUS_HORSES_EXTRAS_RARE_HC_TID
	));
}

function equus_horses_extras_node_insert($node) {
	//TODO: Move all this stuff to the register horse function
	if ($node->type != 'horse' || $node->field_horse_activation_status['und'][0]['value'] != 'Active') {
		return;
	}

	$status = equus_horses_extras_spend_regular_hc($node->uid);

	if ($status === false) {
		watchdog('equus_horses_extras', 'Attempted to spend HC but didn\'t have enough. uid = @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
	}
	equus_horses_extras_calc_stats($node->nid);
}

/**
 *	Calculates the horse's initial stats based on breed and body type
 *
 * -- SHOULD ONLY BE USED UPON INITIAL STAT DISTRIBUTION FOR FOUNDATIONS--
 *
 * @param $nid Node ID of the horse
 */
function equus_horses_extras_calc_stats($nid) {
	$horse = node_load($nid);

	$breedID = $horse->field_horse_breed['und'][0]['target_id'];
	$breed_stats = equus_horses_extras_get_breed_stats($breedID);

	$body_typeID = $horse->field_horse_body_type['und'][0]['target_id'];
	$modifiers = equus_horses_extras_get_body_type_modifiers($body_typeID);

	$stats = array_keys(list_allowed_values(field_info_field('field_stat')));

	// we get the entity ids of the current stats if any
	$eids = array();
	foreach ($horse->field_horse_stats[LANGUAGE_NONE]as $key => $value) {
		$eids[] = $value['value'];
		unset($horse->field_horse_stats[LANGUAGE_NONE][$key]);
	}
	if ($eids > 0) {
		entity_delete_multiple('field_collection_item', $eids);
		node_save($horse);
	}
	drupal_set_message(print_r($eids, true));

    $potential_sum = 0;
    $raw_potentials = array();
	foreach ($stats as $stat) {
        $low_potential = $breed_stats[$stat]['low'] + $modifiers[$stat];
        $high_potential = $breed_stats[$stat]['high'] + $modifiers[$stat];

        if ($low_potential < 0) {
            $low_potential = 0;
        }
        if ($high_potential > 100) {
            $high_potential = 100;
        }
        $raw_potential = rand($low_potential, $high_potential);
        $potential_sum += $raw_potential;

        $raw_potentials[$stat] = $raw_potential;
    }

    $indiv_potential_max = rand(EQUUS_HORSES_EXTRAS_POTENTIAL_STAT_MIN, EQUUS_HORSES_EXTRAS_POTENTIAL_STAT_MAX);
    $scale_factor = $indiv_potential_max / $potential_sum;
    foreach ($raw_potentials as $stat => $raw_potential) {
        $indiv_potential = $raw_potential * $scale_factor;

		$current = 0;
		// Setup the values in the structure expected by the field_collection entity.
		$values = array(
		  	'field_name' => 'field_horse_stats',
		  	'field_stat' => array(
		   		LANGUAGE_NONE => array(array('value' => $stat)),
		  	),
		  	'field_horse_current_stat_value' => array(
		    	LANGUAGE_NONE => array(array('value' => $current)),
		  	),
		  	'field_horse_potential_stat_value' => array(
		    	LANGUAGE_NONE => array(array('value' => $indiv_potential)),
		  	),
            'field_horse_trained_stat_value' => array(
                LANGUAGE_NONE => array(array('value' => $current)),
            ),
		);
		$entity = entity_create('field_collection_item', $values);
		// Attach the field_collection entity to the application node. This has to
		// happen separately so that it actually works -- you can't just specify
		// this via the $values array.
		$entity->setHostEntity('node', $horse);
		// Save the entity. Since it's attached to the right application node, this
		// will both create the field_collection entity and update the application
		// node to point to the new field_activity_log record.
		// drupal_set_message(print_r($entity, true));
		//$entity->save();
		entity_save('field_collection_item', $entity);
	}
}

function equus_horses_extras_get_breed_stats($breedID) {
	$breed = node_load($breedID);
	// get horse stats
	$stats = $breed->field_breed_stat_windows[LANGUAGE_NONE];
	// dpm($stats);
	$result = array();
	foreach ($stats as $stat) {
		$field_collection_item = field_collection_item_load($stat['value']);
		
		// dpm($field_collection_item);
		$stat_name = $field_collection_item->field_stat['und'][0]['value'];
		
		$stat_low_value = $field_collection_item->field_breed_low_stat_value['und'][0]['value'];

		$stat_high_value = $field_collection_item->field_breed_high_stat_value['und'][0]['value'];

		$result[$stat_name] = array('low' => $stat_low_value, 'high' => $stat_high_value);
	}
	return $result;
}

function equus_horses_extras_get_body_type_modifiers($body_typeID) {
	$body_type = node_load($body_typeID);
	// get horse stats
	$stats = $body_type->field_body_type_stat_modifier[LANGUAGE_NONE];
	// dpm($stats);
	$result = array();
	foreach ($stats as $stat) {
		$field_collection_item = field_collection_item_load($stat['value']);
		
		// dpm($field_collection_item);
		$stat_name = $field_collection_item->field_stat['und'][0]['value'];
		
		$stat_modifier = $field_collection_item->field_stat_modifier['und'][0]['value'];

		$result[$stat_name] = $stat_modifier;
	}
	return $result;
}

function computed_field_field_horse_age_compute(&$entity_field, $entity_type, $entity, $field) {
	$aging_details_json = field_get_items($entity_type, $entity, 'field_horse_aging_details');
    $aging_details = json_decode($aging_details_json[0]['value']);

	$entity_field[0]['value'] = floor(equus_horses_extras_calc_age($aging_details)/365);
}

/**
 * Calculates the age of a horse in game days based on information about the aging
 * speed at various time periods in its life.
 *
 * @param Array $aging_speed Array of time period objects to consider. Each time period
 *                           should have properties start (string:Y-m-d H:i:s),
 *                           end (string:Y-m-d H:i:s), and speed (Integer).
 * @param string $today The day to calculate the age against, defaults to today
 * @return int Number of game days old the horse is
 */
function equus_horses_extras_calc_age($aging_speed, $today = NULL) {
    if (empty($aging_speed)) {
        return NULL;
    }

    if ($today == NULL) {
        $today = new DateTime('now');
    } else {
        $today = new DateTime($today);
    }

    $game_days_old = 0;
    foreach($aging_speed as $time_period) {
        if ($time_period->end == NULL) {
            $end = $today;
        } else {
            $end = min($today, new DateTime($time_period->end));
        }

        $time_period_length = $end->diff(new DateTime($time_period->start))->days+1;

        $game_days_old += $time_period_length * $time_period->speed;

        if ($end == $today) {
            break;
        }
    }

    return $game_days_old;
}

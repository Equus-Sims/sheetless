<?php

define("EQUUS_HORSES_EXTRAS_REGULAR_HC_TID",1);
define("EQUUS_HORSES_EXTRAS_RARE_HC_TID",2);

/**
 * Displays an error message if the user has not created 
 * an organization and/or a property when attempting to create a horse.
 *
 * Displays the number of each type of horse credits the user has. 
 *
 * Displays only those properties associated with an organization
 * that the currently logged in user is a member of in the horse 
 * residence field.
 *
 * Implements hook_form_alter for the horse creation form.
 */
function equus_horses_extras_form_horse_node_form_alter(&$form, $form_state) {
	$uid = $GLOBALS['user']->uid;
	// get all organizations (and properties) associated with the currently logged in user
	$organizations = equus_properties_get_user_assoc_properties($uid);

	// if the user has no organizations, print an error
	if (empty($organizations)) {
		drupal_set_message('You need to create an organization and a property before you can create a horse.','error');
	} else {
		$empty = TRUE;

		// if the user has no properties, print an error
		foreach ($organizations as $property_list) {
			if (!empty($property_list)) {
				$empty = FALSE;
				break;
			}
		}

		if ($empty) {
			drupal_set_message('You need to create a property before you can create a horse.','error');
		}
	}
	
	// pass the correct property options to the form for the horse residence field
	$form['field_horse_residence']['und']['#options'] = $organizations;

	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);

	$message = "";
	if ($current_regular_HC == 0) {
		$message .= "You have 0 Regular Horse Credits ";
	} else if ($current_regular_HC == 1) {
		$message .= "You have 1 Regular Horse Credit ";
	} else if ($current_regular_HC > 1) {
		$message .= "You have $current_regular_HC Regular Horse Credits ";
	}
	if ($current_rare_HC == 0) {
		$message .= "and 0 Rare Horse Credits.";
	} else if ($current_rare_HC == 1) {
		$message .= "and 1 Rare Horse Credit.";
	} else if ($current_rare_HC > 1) {
		$message .= "and $current_rare_HC Rare Horse Credits.";
	}
	drupal_set_message($message);
}

/**
 * Verifies that the user has at least 1 HC in order to activate a horse.
 * @param $uid ID of the currently logged in user.
 */
function equus_horses_extras_validate_regular_hc_count($uid) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);
	if ($current_regular_HC < 1 ) {
		form_set_error('field_horse_activation_status', 'You do not have enough Horse Credits to make this horse active. Please visit the Store to buy a Horse Credit.');
	}
}

/**
 * Verifies that the user has at least 1 Rare Horse Credit in order to activate a rare colored horse.
 * @param $uid ID of the currently logged in user.
 */
function equus_horses_extras_validate_rare_hc_count($uid) {
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);
	if ($current_rare_HC < 1 ) {
		form_set_error('field_horse_activation_status', 'You do not have enough Rare Horse Credits to make this horse active. Please visit the Store to buy a Rare Horse Credit.');
	}
}

/**
 * Verifies that the currently logged in user is a member of the 
 * organization that the property in question belongs to.
 * @param $uid ID of the currently logged in user
 * @param $nid ID of the property in question
 */
function equus_horses_extras_validate_residence_ownshp($uid, $nid) {
	$organizations = equus_properties_get_user_assoc_properties($uid);

	$found = FALSE;
	foreach ($organizations as $properties) {
		foreach ($properties as $propertyid => $property) {
			if ($propertyid == $nid) {
				$found = TRUE;
				break;
			}
		}
		if ($found) {
			break;
		}
	}
	if (!$found) {
		form_set_error('field_horse_residence', "You must be a member of the organization that owns the residence property to assign a horse to it.");
	}
}

/**
 * Performs validation on horse creation form elements.
 * 
 * Implements hook_node_validate
 */
function equus_horses_extras_node_validate($node, $form, &$form_state) {
	if ($node->type != 'horse') {
		return;
	}

	// Verify that user has enough horse credits to activate the horse
	// TODO: Make this section its own function
	// check if new horse
	if (!isset($node->nid)) {
		// if new check whether active is set
		if ($node->field_horse_activation_status['und'][0]['value'] == 'Active') {
			// if yes check for points
			equus_horses_extras_validate_regular_hc_count($form['uid']['#value']);
		} 
	} else {
		// get activation status
		$original_value = $form['#node']->field_horse_activation_status['und'][0]['value'];
		$new_value = $node->field_horse_activation_status['und'][0]['value'];

		// if not new check whether previous value is pending and new value is active
		if ($original_value == 'Pending' && $new_value == 'Active') {
			// if yes check for points
			equus_horses_extras_validate_regular_hc_count($form['uid']['#value']);
		}
	}

	// Verify that residence/property is owned by the currently logged in user
	equus_horses_extras_validate_residence_ownshp($form['uid']['#value'], $node->field_horse_residence['und'][0]['target_id']);
	equus_horses_extras_validate_stats($node);
}

function equus_horses_extras_validate_stats($node) {
	$stats = $node->field_horse_stats['und'];
	// drupal_set_message(print_r($stats, true));
	$valid_stats = true;
	$stat_info = [];
	foreach ($stats as $stat) {
		$statname = $stat['field_stat']['und'][0]['value'];
		$statvalue = $stat['field_horse_stat_value']['und'][0]['value'];

		if (empty($statname)) {
			// drupal_set_message("ERROR??? ".print_r($statname,true));
			$valid_stats = false;
			form_set_error('field_horse_stats', "You must assign 6 stats to your horse.");
			return $valid_stats;
		} else {
			// drupal_set_message(print_r($statname,true));
			$stat_info[] = $statname;
		}
	}
	$result = array_unique($stat_info);
	if (count($result) < 6) {
		$valid_stats = false;
		form_set_error('field_horse_stats', "You may not use the same stat twice.");
		return $valid_stats;
	}

	return $valid_stats;
}

/**
 * Detracts a regular HC from a user's account
 * @param $uid ID of the user to detract a regular HC from.
 */
function equus_horses_extras_spend_regular_hc($uid) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);
	if ($current_regular_HC < 1 ) {
		return false;
	}
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => -1,
		'tid' => EQUUS_HORSES_EXTRAS_REGULAR_HC_TID
	));
	return true;
}

/**
 * Detracts a rare HC from a user's account
 * @param $uid ID of the user to detract a rare HC from.
 */
function equus_horses_extras_spend_rare_hc($uid) {
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);
	if ($current_rare_HC < 1 ) {
		return false;
	}
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => -1,
		'tid' => EQUUS_HORSES_EXTRAS_RARE_HC_TID
	));
	return true;
}

/**
 * Adds some number of regular HCs to a user's account
 * @param $uid ID of the user to give regular HC to.
 * @param $quantity Number of regular HC to give a user.
 */
function equus_horses_extras_gain_regular_hc($uid, $quantity) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_REGULAR_HC_TID);

	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => + $quantity,
		'tid' => EQUUS_HORSES_EXTRAS_REGULAR_HC_TID
	));
}

/**
 * Adds some number of rare HCs to a user's account
 * @param $uid ID of the user to give rare HC to.
 * @param $quantity Number of rare HC to give a user.
 */
function equus_horses_extras_gain_rare_hc($uid, $quantity) {
	$current_rare_HC = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_RARE_HC_TID);

	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => + $quantity,
		'tid' => EQUUS_HORSES_EXTRAS_RARE_HC_TID
	));
}

function equus_horses_extras_node_insert($node) {
	if ($node->type != 'horse' || $node->field_horse_activation_status['und'][0]['value'] != 'Active') {
		return;
	}

	$status = equus_horses_extras_spend_regular_hc($node->uid);

	if ($status === false) {
		watchdog('equus_horse_aging', 'Attempted to spend HC but didn\'t have enough. uid = @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
	}
}

function computed_field_field_horse_age_compute(&$entity_field, $entity_type, $entity, $field) {
	$dob = field_get_items($entity_type, $entity, 'field_horse_date_of_birth');
	$date = array_pop($dob);
	$real_date = new DateTime($date['value']);

	$year = $real_date->format("Y");
	$month = $real_date->format("m");

	$field_age_transition_year = field_get_items($entity_type, $entity, 'field_age_transition_year');
	$field_foal_age_multiplier = field_get_items($entity_type, $entity, 'field_foal_age_multiplier');
	$field_adult_age_multiplier = field_get_items($entity_type, $entity, 'field_adult_age_multiplier');

	$transition_year = $field_age_transition_year[0]['value'];
	$foal_multiplier = $field_foal_age_multiplier[0]['value'];
	$adult_multiplier = $field_adult_age_multiplier[0]['value'];

	$entity_field[0]['value'] = equus_horses_extras_calc_age($year,$month,$transition_year,$foal_multiplier,$adult_multiplier);
}

function equus_horses_extras_calc_age($year,$month,$transition_year,$foal_multiplier,$adult_multiplier) {
	$dob = mktime(0,0,0,$month,1,$year);
	$today = mktime(0,0,0);

	$age_in_months = ($today - $dob)/(60*60*24*(365/12));

	$months_as_foal = $transition_year*($foal_multiplier);

	$years_as_foal = $age_in_months/$foal_multiplier;

	if ($years_as_foal < 1) {
		return 0;
	} else {
		$months_as_adult = $age_in_months - $months_as_foal;

		$years_as_adult = $months_as_adult/$adult_multiplier;

		$calc_age = $years_as_adult + $transition_year;

		return floor($calc_age);
	}
}

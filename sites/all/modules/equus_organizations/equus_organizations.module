<?php 

define("EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID",60);

/**
 * Implements hook_node_info()
 */
function equus_organizations_node_info() {
	return array(
		'organization' => array(
			'name' => t('Organization'),
			'base' => 'organization',
			'description' => t('An organization'),
			'has_title' => TRUE,
			'title_label' => t('Name')
			
		)
	);
}

function organization_form($node, $form_state) {
	return node_content_form($node, $form_state);
}

function equus_organizations_node_insert($node) {
	if ($node->type != 'organization') {
		return;
	}
	$status = equus_organizations_spend_org_credit($node->uid);

	if ($status == false) {
		watchdog('equus_organizations', 'Attempted to spend Org Credit but didn\'t have enough. uid = @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
		return;
	}
}

function equus_organizations_node_validate($node, $form, $form_state) {
	if ($node->type != 'organization')
		return;
	}
	drupal_set_message(userpoints_get_current_points($node->uid, EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID));
	if ($node->nid == NULL && userpoints_get_current_points($node->uid, EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID) == 0) {
		form_set_error('', "You do not have enough Organization Credits to create this Organization. If you are a new member, please go to the Store and purchase your Starter Pack. If you have already purchased your Starter Pack and created your first Organization, then you must buy another Organization Credit from the Store before you can create additional Organizations.");
	}
}

function equus_organizations_get_assoc_orgs($uid) {
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'organization')
		->propertyCondition('status', 1)
		->propertyCondition('uid', $uid);
	$result = $query->execute();
	$nid_owner = array();
	if (count($result) > 0) {
		$nid_owner = array_keys($result['node']);
	} 

	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'organization')
		->propertyCondition('status', 1)
		->fieldCondition('equus_organizations_users', 'target_id', $uid);
	$result = $query->execute();
	$nid_co_owner = array();
	if (count($result) > 0) {
		$nid_co_owner = array_keys($result['node']);
	} 

	$nids = array_merge($nid_owner, $nid_co_owner);
	return $nids;
}

/**
 * Gets a list of all organizations (by title) associated with a user.
 * @param $uid ID of the user to get organizations for.
 */
function equus_organizations_get_org_options($uid) {
	// get all organizations associated with the currently logged in user
	$orgIDs = equus_organizations_get_assoc_orgs($uid);

	$organizations = node_load_multiple($orgIDs);

	// if the user has no organizations, print an error
	if (empty($organizations)) {
		drupal_set_message('You need to create an organization before you can purchase anything besides a Starter Pack.','error');
	}

	// populate the array that we are going to use to set the options
	$org_options = array();
	foreach ($organizations as $organization) {
		$org_options[$organization->nid] = $organization->title;
	}
	return $org_options;
}

/**
 * Verifies that the user has at least 1 Org Credit in order to create an organization.
 * @param $uid ID of the currently logged in user.
 */
function equus_organizations_validate_org_credit_count($uid) {
	$current_org_credit = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID);
	if ($current_org_credit < 1 ) {
		drupal_set_error('You do not have enough Organization Credits to create this organization. Please visit the Store to buy an Organization Credit.');
	}
}

/**
 * Adds some number of Org Credits to a user's account
 * @param $uid ID of the user to give Org Credits to.
 * @param $quantity Number of Org Credits to give a user.
 */
function equus_organizations_gain_org_credit($uid, $quantity) {
	$current_org_credit = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID);

	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => + $quantity,
		'tid' => EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID
	));
}

/**
 * Detracts a regular HC from a user's account
 * @param $uid ID of the user to detract a regular HC from.
 */
function equus_organizations_spend_org_credit($uid) {
	$current_org_credit = userpoints_get_current_points($uid, EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID);
	if ($current_org_credit < 1 ) {
		return false;
	}
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => -1,
		'tid' => EQUUS_HORSES_EXTRAS_ORG_CREDIT_TID
	));
	return true;
}

/**
 * Returns an array of uids associated with the org
 * @param $orgID ID of the org to find assoc users for
 */
function equus_organizations_get_assoc_users($orgID) {
	$org = node_load($orgID);
	dpm($org);

	$users = [];
	if (isset($org->equus_organizations_users['und'])) {
		$user_count = $org->equus_organizations_users['und'];

		for ($i = 0; $i < count($user_count); $i++) {
			$users[] = $user_count[$i]['target_id'];
		}
	}
	
	$users[] = $org->uid;

	return $users;
}

<?php 

/**
 * Ensure that all members of an org can access that org's properties to edit.
 *
 * Implements hook_node_access
 */
function equus_properties_extras_node_access($node, $op, $account) {
	$type = is_string($node) ? $node : $node->type;

	if ($type == 'property' && $op == 'update') {
		// get hosting org
		$org_id = $node->field_property_ownership['und'][0]['target_id'];
		$org = node_load($org_id);

		// get members of hosting org
		$members = array();
		$members[] = $org->uid;
		if (!empty($org->equus_organizations_users)) {
			foreach ($org->equus_organizations_users['und'] as $user) {
				$members[] = $user['target_id'];
			}
		}

		// if current user is not member of hosting org, deny access
		if (!in_array($account->uid, $members)) {
			return NODE_ACCESS_DENY;
		}
		if (in_array($account->uid, $members)) {
			return NODE_ACCESS_ALLOW;
		}
	}
}

/**
 * Displays an error message if the user has not created 
 * an organization when attempting to create a property.
 *
 * Displays only those organizations associated with the
 * currently logged in user in the property ownership field.
 *
 * Implements hook_form_alter for the property creation form.
 */
function equus_properties_extras_form_property_node_form_alter(&$form, $form_state) {
	global $user;

	$org_options = equus_organizations_get_org_options($user->uid);

	// pass the correct organization options to the form for the property ownership field
	if ($org_options) {
		$form['field_property_ownership']['und']['#options'] = $org_options;
	} else {
		$form['field_property_ownership']['#disabled'] = true;
		$form['actions']['submit']['#access'] = false;
    	$form['actions']['preview']['#access'] = false;
		drupal_set_message(t("You need to create an organization before you can create a property."), 'warning');
	}
}

/**
 * Verifies that the currently logged in user is a member of the 
 * organization in question.
 * @param $uid ID of the currently logged in user
 * @param $nid ID of the organization in question
 */
function equus_properties_extras_validate_org_ownshp($uid, $nid) {
	// gets all organizations associated with the user
	$orgIDs = equus_organizations_get_assoc_orgs($uid);

	$org = node_load($nid);

	// if the organization in question is not associated with the user, print an error
	if (!in_array($nid, $orgIDs)) {
		form_set_error('field_property_ownership', "You must be a member of {$org->title} to assign it a property.");
	}
}

/**
 * Performs validation on property creation form elements.
 * 
 * Implements hook_node_validate
 */
function equus_properties_extras_node_validate($node, $form, &$form_state) {
	if ($node->type != 'property') {
		return;
	}
	// Validate that the organization is owned by the currently logged in user
	equus_properties_extras_validate_org_ownshp($form['uid']['#value'], $node->field_property_ownership['und'][0]['target_id']);
}

/**
 * Gets the user's associated properties
 *
 * @param $uid The ID of the user in question.
 * @return An array of property IDs
 */
function equus_properties_get_user_assoc_properties($uid) {
	// get user's associated orgs
	$nids = equus_organizations_get_assoc_orgs($uid);
	if (empty($nids)) {
		return array();
	}
	// query for all properties associated with an org
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'property')
		->propertyCondition('status', 1)
		->fieldCondition('field_property_ownership', 'target_id', $nids, 'IN');
	$result = $query->execute();

	// initialize array of property IDs
	$propertyIDs = array();

	// if a property exists, add it to the array
	if (count($result) > 0) {
		$propertyIDs = array_keys($result['node']);
	}

	return $propertyIDs;
}

/**
 * Gets the user's associated properties
 *
 * The output is an array with keys being organization names and values
 * being an array of associated properties. Each entry in the properties
 * array has a property id as a key and the property name as a value.
 * 
 * Example Output:
 *
 * array(
 *     'foo' => array(
 * 			5 => 'a property owned by foo',
 *          6 => 'another property owned by foo'    
 *      ),
 *      'bar' => array(
 *          7 => 'a property owned by bar',
 *          8 => 'another property owned by bar' 
 *      )
 * )
 *
 * @param $uid The ID of the user in question.
 * @return An array with keys being organization names and values being an array of associated properties.
 */
function equus_properties_get_user_assoc_properties_by_org($uid) {
	// get all organization IDs that the member is associated with
	$orgIDs = equus_organizations_get_assoc_orgs($uid);

	// get all the organization nodes from org IDs
	$organizations = node_load_multiple($orgIDs);

	// initialize array of properties
	$properties = array();
	foreach ($organizations as $organization) {
		// set $properties[$organization->title] to an array
		$properties[$organization->title] = array();

		// get the property nodes associated with an org
		$property_nids = equus_properties_get_org_assoc_properties($organization->nid);
		$property_nodes = node_load_multiple($property_nids);
		foreach ($property_nodes as $property) {
			// fill properties array with key/value (ID/title) pairs for property nodes
			$properties[$organization->title][$property->nid] = $property->title;
		}
	}	
	return $properties;
}

/**
 * Gets the properties associated with an organization.
 *
 * @param $nid The ID of the organization in question.
 * @return An array of property nodes.
 */
function equus_properties_get_org_assoc_properties($nid) {
	// query for all properties associated with an org
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'property')
		->propertyCondition('status', 1)
		->fieldCondition('field_property_ownership', 'target_id', $nid);
	$result = $query->execute();

	// initialize array of property IDs
	$propertyIDs = array();

	// if a property exists, add it to the array
	if (count($result) > 0) {
		$propertyIDs = array_keys($result['node']);
	}

	return $propertyIDs;
}
<?php

/*function equus_store_menu() {
	$items = array();
  
	$items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
	    'title' => 'Example Form', //page title
	    'description' => 'A form to mess around with.',
	    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
	    'page arguments' => array('equus_store_form'), //put the name of the form here
	    'access callback' => TRUE
	  );

	return $items;
}*/

function equus_store_form($form, &$form_state) {
	$node_ID = arg(1);
	$node = node_load($node_ID);
	global $user;

  	if ($node->field_equus_sale_item_type['und'][0]['entity']->name != 'Starter Pack') {
		$form['quantity'] = array(
			'#type' => 'textfield', //you can find a list of available types in the form api
		    '#title' => t('Quantity'),
		    '#size' => 10,
		    '#maxlength' => 10,
		    '#required' => TRUE, //make this field required
		    '#default_value' => 1, //make this field required 
		);
		$form['organization'] = array(
			'#type' => 'select', //you can find a list of available types in the form api
		    '#title' => t('Organization'),
		    '#size' => 60,
		    '#maxlength' => 60,
		    '#required' => TRUE, //make this field required
		    '#options' => equus_organizations_get_org_options($user->uid)
		);
	}

	// check if the logged in user is one of the buyers
	if ($node->field_equus_sale_item_type['und'][0]['entity']->name == 'Starter Pack' && equus_members_check_tutorial_progess($user->uid, 'start_pack_purchased')) {
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Purchased'),
			'#disabled' => true
		);
	} else {
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Buy'),
		);
	}

	return $form;
}

/**
 * Displays an error message if the user has not created 
 * an organization when attempting to create a sale.
 *
 * Displays only those organizations associated with the
 * currently logged in user in the organization field.
 *
 * Implements hook_form_alter for the sale creation form.
 */
function equus_store_form_equus_sale_node_form_alter(&$form, $form_state) {
	global $user;
	// get a list of horse IDs associated with a user
	$nids = equus_horses_extras_get_assoc_horses($user->uid);
	// give the IDs to return a list of those horses by name and populate dropdown
	$form['field_equus_sale_item']['und']['#options'] = equus_horses_extras_get_horse_options($nids);
	// pass the correct organization options to the form for the organization field
	$form['field_hosting_organization']['und']['#options'] = equus_organizations_get_org_options($user->uid);
}

// TODO: Clean up the mess in this function
function equus_store_file_entity_access($op, $file, $account) {
	if ($op == 'view' && !empty($file->fid)) {
		$sw = file_stream_wrapper_get_instance_by_uri($file->uri);
	    if ($sw instanceof DrupalPrivateStreamWrapper) {
			$used_by = file_usage_list($file);
			if (!array_key_exists("file", $used_by)) {
				return FILE_ENTITY_ACCESS_IGNORE;
			}

			foreach($used_by['file'] as $entity_type => $entity_ids) {
				if ($entity_type != "node") {
					continue;
				}

				$entites = entity_load($entity_type, array_keys($entity_ids));
				foreach($entites as $entity) {
					// dpm($entity);
					if ($entity->type = "equus_sale") {
						// get all orgs associated with logged in user
						$org_ids = equus_organizations_get_assoc_orgs($account->uid);
						// check if a member of the selling org is viewing
						foreach ($org_ids as $nid) {
							if ($entity->field_hosting_organization['und'][0]['target_id'] == $nid) {
								return FILE_ENTITY_ACCESS_ALLOW;
							}
							// if there are any buyers
							if ($entity->field_buyer) {
								// check if a member of a buying org is viewing
								foreach($entity->field_buyer['und'] as $buyer) {
									if ($buyer['target_id'] == $nid) {
										return FILE_ENTITY_ACCESS_ALLOW;
									}
								}
							}
						}
						// if you got here then you are neither a seller or a buyer
						return FILE_ENTITY_ACCESS_DENY;
					}
				}
			}
	    }
	}

	return FILE_ENTITY_ACCESS_IGNORE;
}

function equus_store_form_validate($form, &$form_state) {
	$node_ID = arg(1);
	$node = node_load($node_ID);

	if ($node->field_equus_sale_item_type['und'][0]['entity']->name != 'Starter Pack') {
			$quantity = (int) $form['quantity']['#value'];
		if ($quantity == 0) {
			form_set_error('quantity', "Please set the quantity to at least 1 if you would like to purchase the item.");
		}
	}
}

function equus_store_form_submit($form, &$form_state) {
	$node_ID = arg(1);
	$node = node_load($node_ID);
	$nid = $node->uid;

	$sale_type = $node->field_equus_sale_type['und'][0]['value'];
	$item_type = $node->field_equus_sale_item_type['und'][0]['entity']->name;

	global $user;
	$uid = $user->uid;

	if ($item_type == 'Starter Pack') {
		equus_store_starter_pack_sale($uid);
		return;
	}

	$quantity = (int) $form['quantity']['#value'];
	$price_per_unit = $node->field_equus_sale_price_per_unit['und'][0]['value'];
	$total = $quantity * $price_per_unit;
	$source_id = $form['organization']['#value'];
	$dest_id = $node->field_hosting_organization['und'][0]['target_id'];
	$org = node_load($source_id);

	if (equus_banking_check_sufficient_funds($total, $source_id) == false) {
		drupal_set_message("The organization {$org->title} does not have enough money to complete the purchase.", 'error');
		return;
	}
	if ($sale_type == "gameplayitem") {
		if ($item_type == 'Horse Credit') {
			equus_store_horse_credit_sale($uid, $source_id, EQUUS_STORE_ID, $quantity, $total);
		} else if ($item_type == 'Organization Credit') {
			equus_store_org_credit_sale($uid, $source_id, EQUUS_STORE_ID, $quantity, $total);
		}  else {
			drupal_set_message("The sale type $sale_type doesn't exist.", "warning");
			watchdog('equus_store_sale_type', 'Attempted to purchase an item with invalid sale type: @sale_type uid = @uid', array('@uid'=>$node->uid, '@sale_type' => $sale_type), WATCHDOG_ERROR);
		}
	} else if ($sale_type == "quicksale") {
		try {
			equus_store_quick_sale($node, $source_id, $dest_id, $quantity, $total);
		} catch (Exception $e) {
			drupal_set_message("Failed to complete purchase. Error: " . $e->getMessage(), 'error');
			watchdog('equus_store_quick_sale', 'Failed to complete purchase. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
			return;
		}
	} else if ($sale_type == "directsale") {
		//TODO: Write direct sale functionality
		try {
			equus_store_quick_sale($node, $source_id, $dest_id, $quantity, $total);
		} catch (Exception $e) {
			drupal_set_message("Failed to complete purchase. Error: " . $e->getMessage(), 'error');
			watchdog('equus_store_quick_sale', 'Failed to complete purchase. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
			return;
		}
	} else if ($sale_type == "auction") {
		//TODO: Write auction functionality
		try {
			equus_store_quick_sale($node, $source_id, $dest_id, $quantity, $total);
		} catch (Exception $e) {
			drupal_set_message("Failed to complete purchase. Error: " . $e->getMessage(), 'error');
			watchdog('equus_store_quick_sale', 'Failed to complete purchase. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
			return;
		}
	} else if ($sale_type == "lease") {
		//TODO: Write lease functionality
		try {
			equus_store_quick_sale($node, $source_id, $dest_id, $quantity, $total);
		} catch (Exception $e) {
			drupal_set_message("Failed to complete purchase. Error: " . $e->getMessage(), 'error');
			watchdog('equus_store_quick_sale', 'Failed to complete purchase. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
			return;
		}
	} else if ($sale_type == "customcontent") {
		//TODO: Write custom content functionality
		try {
			equus_store_quick_sale($node, $source_id, $dest_id, $quantity, $total);
		} catch (Exception $e) {
			drupal_set_message("Failed to complete purchase. Error: " . $e->getMessage(), 'error');
			watchdog('equus_store_quick_sale', 'Failed to complete purchase. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
			return;
		}
	} else {
		drupal_set_message("The sale type $sale_type doesn't exist.", "warning");
		watchdog('equus_store_sale_type', 'Attempted to purchase an item with invalid sale type: @sale_type uid = @uid', array('@uid'=>$node->uid, '@sale_type' => $sale_type), WATCHDOG_ERROR);
	}
	
}

function equus_store_horse_credit_sale($uid, $source_id, $dest_id, $quantity, $total) {
	if ($quantity < 1) {
		drupal_set_message("Quantity must be greater than 1.");
		return;
	}
	equus_horses_extras_gain_regular_hc($uid, $quantity);
		$suffix = ($quantity == 1 ? "" : "s");

		setlocale(LC_MONETARY, 'en_US');

		$memo = "Purchased $quantity Horse Credit{$suffix}";
		$message = "You have purchased $quantity Horse Credit{$suffix} from the Equus Store for " . money_format('%.0n', $total);

		equus_banking_create_transaction($memo, $source_id, $dest_id, $total);
		drupal_set_message($message);
}

function equus_store_org_credit_sale($uid, $source_id, $dest_id, $quantity, $total) {
	equus_organizations_gain_org_credit($uid, $quantity);
		$suffix = ($quantity == 1 ? "" : "s");

		setlocale(LC_MONETARY, 'en_US');

		$memo = "Purchased $quantity Organization Credit{$suffix}";
		$message = "You have purchased $quantity Organization Credit{$suffix} from the Equus Store for " . money_format('%.0n', $total);

		equus_banking_create_transaction($memo, $source_id, $dest_id, $total);
		drupal_set_message($message);
}

function equus_store_starter_pack_sale($uid) {
	if (equus_members_check_tutorial_progess($uid, 'start_pack_purchased')) {
		drupal_set_message("You have already purchased a Starter Pack. You may not purchase another.", 'warning');
		return;
	}

	equus_horses_extras_gain_regular_hc($uid, 2);
	equus_organizations_gain_org_credit($uid, 1);
	drupal_set_message("You have purchased your Starter Pack from the Equus Store. You now have the credits required to create your first organization 
		and activate two horses. To create your organization, go to your profile dropdown in the main navigation bar and select 'Dashboard', then click Add new Organization.");
	equus_members_update_tutorial_progress($uid, 'start_pack_purchased');
}

function equus_store_quick_sale($node, $source_id, $dest_id, $quantity, $total) {
	try {
		// dpm($node);
		equus_banking_create_transaction("Sale: {$node->title}", $source_id, $dest_id, $total);
	} catch (Exception $e) {
		drupal_set_message("Failed to create transaction. Error: " . $e->getMessage(), 'error');
		watchdog('equus_store_quick_sale', 'Failed to create transaction. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
		return;
	}
	try {
		equus_store_add_buyer($node, $source_id);
	} catch (Exception $e) {
		drupal_set_message("Failed to add a buyer. Error: " . $e->getMessage(), 'error');
		watchdog('equus_store_quick_sale', 'Failed to add a buyer. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
		return;	
	}
	try {
		equus_store_reduce_quantity($node, $quantity);
	} catch (Exception $e) {
		drupal_set_message("Failed to reduce quantity. Error: " . $e->getMessage(), 'error');
		watchdog('equus_store_quick_sale', 'Failed to reduce quantity. Error: $e->getMessage(): Node id: @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
		return;	
	}
	drupal_set_message("Purchase completed");
}

function equus_store_add_buyer($node, $source_id) {
	$org = node_load($source_id);

	if (!isset($node->field_buyer)) {
		$node->field_buyer['und'] = array();
	} 
	$node->field_buyer['und'][] = array('target_id' => $source_id);

	// Make this change a new revision
	$node->revision = 1;
	$node->log = 'This node was programmatically updated at ' . date('c') . 'to add buyer: ' . $org->title . "ID: " . $source_id;

	node_save($node);
}

function equus_store_reduce_quantity($node, $quantity) {
	if (!isset($node->field_equus_sale_quantity)) {
		watchdog('field_equus_sale_quantity', 'Failed to reduce quantity on node id: @uid. Quantity isn\'t set.', array('@uid'=>$node->uid), WATCHDOG_ERROR);
	} else {
		$previous_quantity = (int) $node->field_equus_sale_quantity['und'][0]['value'];
		if ($previous_quantity > 0) {
			$new_quantity = $previous_quantity - $quantity;
			$node->field_equus_sale_quantity['und'][0]['value'] = $new_quantity;

			// Make this change a new revision
			$node->revision = 1;
			$node->log = 'This node was programmatically updated at ' . date('c') . 'to add buyer: ' . $node->title;

			node_save($node);
		} else {
			drupal_set_message("This item is sold out. Sorry!");
			watchdog('field_equus_sale_quantity', 'Failed to reduce quantity on node id: @uid. Quantity is already 0 or less.', array('@uid'=>$node->uid), WATCHDOG_ERROR);
		}
	}
}

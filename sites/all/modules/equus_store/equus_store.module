<?php

function equus_store_menu() {
	$items = array();
  
	$items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
	    'title' => 'Example Form', //page title
	    'description' => 'A form to mess around with.',
	    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
	    'page arguments' => array('equus_store_form'), //put the name of the form here
	    'access callback' => TRUE
	  );

	return $items;
}

function equus_store_form($form, &$form_state) {
	$node_ID = arg(1);
	$node = node_load($node_ID);
	global $user;

  	if ($node->field_equus_sale_item_type['und'][0]['entity']->name != 'Starter Pack') {
		$form['quantity'] = array(
			'#type' => 'textfield', //you can find a list of available types in the form api
		    '#title' => t('Quantity'),
		    '#size' => 10,
		    '#maxlength' => 10,
		    '#required' => TRUE, //make this field required
		    '#default_value' => 1, //make this field required 
		);
		$form['organization'] = array(
			'#type' => 'select', //you can find a list of available types in the form api
		    '#title' => t('Organization'),
		    '#size' => 60,
		    '#maxlength' => 60,
		    '#required' => TRUE, //make this field required
		    '#options' => equus_organizations_get_org_options($user->uid)
		);
	}

	// check if the logged in user is one of the buyers
	if ($node->field_equus_sale_item_type['und'][0]['entity']->name == 'Starter Pack' && equus_members_check_tutorial_progess($user->uid, 'start_pack_purchased')) {
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Purchased'),
			'#disabled' => true
		);
	} else {
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Buy'),
		);
	}

	return $form;
}

/**
 * Displays an error message if the user has not created 
 * an organization when attempting to create a sale.
 *
 * Displays only those organizations associated with the
 * currently logged in user in the organization field.
 *
 * Implements hook_form_alter for the sale creation form.
 */
function equus_store_form_equus_sale_node_form_alter(&$form, $form_state) {
	global $user;

	// pass the correct organization options to the form for the organization field
	$form['field_hosting_organization']['und']['#options'] = equus_organizations_get_org_options($user->uid);
}

function equus_store_file_entity_access($op, $file, $account) {
	if ($op == 'view' && !empty($file->fid)) {
		$sw = file_stream_wrapper_get_instance_by_uri($file->uri);
	    if ($sw instanceof DrupalPrivateStreamWrapper) {
			$used_by = file_usage_list($file);
			if (!array_key_exists("file", $used_by)) {
				return FILE_ENTITY_ACCESS_IGNORE;
			}

			foreach($used_by['file'] as $entity_type => $entity_ids) {
				if ($entity_type != "node") {
					continue;
				}

				$entites = entity_load($entity_type, array_keys($entity_ids));
				foreach($entites as $entity) {
					dpm($entity);
					if ($entity->type = "equus_sale") {
						// check if the logged in user is the seller
						if ($entity->uid == $account->uid) {
							return FILE_ENTITY_ACCESS_ALLOW;
						}
						// check if the logged in user is one of the buyers
						foreach($entity->field_buyer['und'] as $buyer) {
							if ($buyer['target_id'] == $account->uid) {
								return FILE_ENTITY_ACCESS_ALLOW;
							}
						}
						// if you got here then you are neither a seller or a buyer
						return FILE_ENTITY_ACCESS_DENY;
					}
				}
			}
	    }
	}

	return FILE_ENTITY_ACCESS_IGNORE;
}

function equus_store_horse_credit_sale($uid, $source_id, $dest_id, $quantity, $total) {
	equus_horses_extras_gain_regular_hc($uid, $quantity);
		if ($quantity == 1) {
			equus_banking_create_transaction("Purchased 1 Horse Credit", $source_id, $dest_id, $total);
			drupal_set_message("You have purchased 1 Horse Credit from the Equus Store for {$total}");
		} else if ($quantity > 1) {
			equus_banking_create_transaction("Purchased {$quantity} Horse Credits", $source_id, $dest_id, $total);
			drupal_set_message("You have purchased {$quantity} Horse Credits from the Equus Store for {$total}");
		}
}

function equus_store_starter_pack_sale($uid) {
	if (equus_members_check_tutorial_progess($uid, 'start_pack_purchased')) {
		drupal_set_message("You have already purchased a Starter Pack. You may not purchase another.", 'warning');
		return;
	}

	equus_horses_extras_gain_regular_hc($uid, 2);
	equus_organizations_gain_org_credit($uid, 1);
	drupal_set_message("You have purchased your Starter Pack from the Equus Store. You now have the credits required to create your first organization 
		and activate two horses. To create your organization, go to your profile dropdown in the main navigation bar and select 'Dashboard', then click Add new Organization.");
	equus_members_update_tutorial_progress($uid, 'start_pack_purchased');
}

function equus_store_form_submit($form, &$form_state) {
	$node_ID = arg(1);
	$node = node_load($node_ID);
	dpm($node);
	dpm($form);
	global $user;

	$sale_type = $node->field_equus_sale_type['und'][0]['value'];
	$item_type = $node->field_equus_sale_item_type['und'][0]['entity']->name;

	$uid = $user->uid;
	$nid = $node->uid;
	$price_per_unit = $node->field_equus_sale_price_per_unit['und'][0]['value'];

	if ($sale_type == "gameplayitem") {
		if ($item_type == 'Starter Pack') {
			equus_store_starter_pack_sale($uid);
		} else {
			$quantity = $form['quantity']['#value'];
			$total = $quantity * $price_per_unit;
			$source_id = $form['organization']['#value'];
			$dest_id = $node->field_hosting_organization['und'][0]['target_id'];
			if (equus_banking_check_sufficient_funds($total, $source_id) == false) {
				drupal_set_message("You do not have enough money to complete the purchase.");
				return;
			}
		}
		}

		// TODO: Check if ret is false?
		// if return value is false, it means the save failed
	} //else if ($sale_type == "")
	
}

<?php

define("EQUUS_HORSE_AGING_REGULAR_HC_TID",1);

function equus_horse_aging_validate_hc_count($uid) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSE_AGING_REGULAR_HC_TID);
	if ($current_regular_HC < 1 ) {
		form_set_error('field_horse_activation_status', 'You do not have enough regular horse credits to make this horse active.');
	}
}

function equus_horse_aging_node_validate($node, $form, &$form_state) {
	if ($node->type != 'horse') {
		return;
	}

	// check if new horse
	//		if new check whether active is set
	//			if yes check for points
	// 		if not new check whether previous value is pending and new value is active
	//			if yes check for points

	if (!isset($node->nid)) {
		if ($node->field_horse_activation_status['und'][0]['value'] == 'Active') {
			//dpm("check for points - new horse");
			equus_horse_aging_validate_hc_count($form['uid']['#value']);
		} 
	} else {
		$original_value = $form['#node']->field_horse_activation_status['und'][0]['value'];
		$new_value = $node->field_horse_activation_status['und'][0]['value'];

		if ($original_value == 'Pending' && $new_value == 'Active') {
			//dpm("check for points - edit horse");
			equus_horse_aging_validate_hc_count($form['uid']['#value']);
		}
	}

	//dpm($node);
	//dpm($form);
}

function equus_horse_aging_spend_regular_hc($uid) {
	$current_regular_HC = userpoints_get_current_points($uid, EQUUS_HORSE_AGING_REGULAR_HC_TID);
	if ($current_regular_HC < 1 ) {
		return false;
	}
	userpoints_userpointsapi(array(
		'uid' => $uid,
		'points' => -1,
		'tid' => EQUUS_HORSE_AGING_REGULAR_HC_TID
	));
	return true;
}

function equus_horse_aging_node_insert($node) {
	//dpm('Janelle was here!');
	if ($node->type != 'horse' || $node->field_horse_activation_status['und'][0]['value'] != 'Active') {
		return;
	}

	$status = equus_horse_aging_spend_regular_hc($node->uid);

	if ($status === false) {
		watchdog('equus_horse_aging', 'Attempted to spend HC but didn\'t have enough. uid = @uid', array('@uid'=>$node->uid), WATCHDOG_ERROR);
	}
}










//function equus_horse_aging_transition_year($form) {
	//$transition_year = $form['#node']->field_age_transition_year['und'][0]['value'];
//}

//function equus_horse_aging_foal_multiplier($form) {
	//return 12/$form['#node']->field_foal_age_multiplier['und'][0]['value'];
//}

//function equus_horse_aging_adult_multiplier($form) {
	//return 12/$form['#node']->field_adult_age_multiplier['und'][0]['value'];
//}

function computed_field_field_horse_age_compute(&$entity_field, $entity_type, $entity, $field) {
	$date = array_pop(field_get_items($entity_type, $entity, 'field_horse_date_of_birth'));
	$real_date = new DateTime($date['value']);

	$year = $real_date->format("Y");
	$month = $real_date->format("m");
	$dob = mktime(0,0,0,$month,1,$year);
	$today = mktime(0,0,0);

	$transition_year = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_age_transition_year')));
	$foal_multiplier = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_foal_age_multiplier')));
	$adult_multiplier = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_adult_age_multiplier')));

	$age_in_months = ($today - $dob)/(60*60*24*(365/12));

	if ($age_in_months < 1) {
		$entity_field[0]['value'] = 1;
	} else {

	$months_as_foal = $transition_year*($foal_multiplier);

	$years_as_foal = $age_in_months/$foal_multiplier;

	$months_as_adult = $age_in_months - $months_as_foal;

	$years_as_adult = $months_as_adult / $adult_multiplier;

	$calc_age = $years_as_adult + $transition_year;

	$entity_field[0]['value'] = $calc_age;
	}	
}

//function equus_horse_aging_calc_age_months($entity_type, $entity, $field) {
	//$date = array_pop(field_get_items($entity_type, $entity, 'field_horse_date_of_birth'));
	//$real_date = new DateTime($date['value']);

	//$year = $real_date->format("Y");
	//$month = $real_date->format("m");
	//$dob = mktime(0,0,0,$month,1,$year);
	//$today = mktime(0,0,0);

    //return ($today - $dob)/(60*60*24*(365/12));
//}

//function equus_horse_aging_calc_rl_months_foal($form) {
    //return equus_horse_aging_transition_year($form)*equus_horse_aging_foal_multiplier($form);
//}

//function equus_horse_aging_calc_years_as_adult($form) {
	//$months_as_adult = equus_horse_aging_calc_age_months($dob,$today) - equus_horse_aging_calc_rl_months_foal($form);
    //return ($months_as_adult/12.0)*equus_horse_aging_adult_multiplier($form);
//}

//function equus_horse_aging_calc_age($form) {
	//$transition_year = $form['#node']->field_age_transition_year['und'][0]['value'];
    //return equus_horse_aging_calc_years_as_adult($months_as_adult,$adult_multiplier) + $transition_year;
//}
